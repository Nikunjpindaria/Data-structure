public class NQueens {
    final int N = 4;

    void printSolution(int board[][]) {
        for (int[] row : board) {
            for (int val : row) {
                System.out.print(val + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    boolean isSafe(int board[][], int row, int col) {
        for (int i = 0; i < col; i++)
            if (board[row][i] == 1) return false;

        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 1) return false;

        for (int i = row, j = col; j >= 0 && i < N; i++, j--)
            if (board[i][j] == 1) return false;

        return true;
    }

    boolean solveNQUtil(int board[][], int col) {
        if (col >= N) {
            printSolution(board);
            return true;
        }

        boolean res = false;
        for (int i = 0; i < N; i++) {
            if (isSafe(board, i, col)) {
                board[i][col] = 1;
                res = solveNQUtil(board, col + 1) || res;
                board[i][col] = 0;
            }
        }
        return res;
    }

    void solveNQ() {
        int board[][] = new int[N][N];
        if (!solveNQUtil(board, 0))
            System.out.println("Solution does not exist");
    }

    public static void main(String[] args) {
        NQueens nQueens = new NQueens();
        nQueens.solveNQ();
    }
}
